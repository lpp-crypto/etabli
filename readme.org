#+TITLE: ETABLI: name-based workspace management for SWAY
#+Time-stamp: <2025-03-01 18:10:44>



* Initial Disclaimer
This project taking shape: I use as my daily driver on two different computers. Still, very much at the alpha stage.

* What is Etabli?
** Tagline
Allow non-trivial workspace management in =sway=!
** Goals
Using =swaywm= as a window manager, I work on multiple projects at the same time. Each project requires multiple workspaces: typically, an emacs/evince workspace to write my notes, a workspace just for firefox with the tabs relevant to this project only, and another workspace with emacs/several terminals for the experimental part. Navigating these workspaces using only numbers is very cumbersome: I constantly create and delete new ones.

As a consequence, I wanted a way to:
1. have workspaces defined by their names, not their number, along with a convenient =dmenu= interface to switch between them;
2. group workspaces by theme, and cycle through the workspaces withing a theme easily;
3. easily create a workspace with a specific set of windows opened, laid out in a specific way, automatically.

The first goal is achieved pretty easily since =swaywm= provides what we need basically out of the box. The next ones require a bit more work.
** Usage
A level is simply defined as a set of workspace with names starting with the same string followed by a separator (by default, =/=). For example, =code/compile= and =code/sources= are automatically grouped into the same level.

* Setup
** Dependencies
=Etabli= needs the [[https://github.com/altdesktop/i3ipc-python][i3ipc-python]] module (=pip install i3ipc-python=), and =rofi= (though it should work with your favorite choice of =dmenu=-type interface).

** Sway configuration
To use, simply add something like the following snippets to your =sway= configuration, where =~/etabli/etabli.py= needs to be replaced by the actual path.

*** Moving within levels
#+BEGIN_SRC
bindsym $mod+o exec python3 <path/to/etabli.py> next_workspace_in_level
bindsym $mod+u exec python3 <path/to/etabli.py> previous_workspace_in_level
bindsym $mod+Shift+o exec python3 <path/to/etabli.py> new_workspace_in_level
#+END_SRC

With this configuration, pressing =mod+o= will move the focus to the next workspace (in alphabetic order) on the same level. It does nothing if there is a single workspace on this level. Pressing =mod+u= moves the other way. Finally, pressing =mod+Shift+o= moves the focus to a new workspace on the same level.

*** Moving in general
The levels (including those with a unique workspace) are displayed in alphabetic order, not by increasing indices (on purpose). To switch workspace in the same order (as if they were, say, firefox tabs), you can also add the following.

#+BEGIN_SRC
bindsym $mod+Next exec python3 <path/to/etabli.py> next_workspace
bindsym $mod+Prior exec python3 <path/to/etabli.py> prev_workspace
#+END_SRC

The keys =Next= and =Prior= correspond to the "page down" and "page up" keys. Pressing =mod+page down= will then shift to the next workshop in the list as it is displayed, ignoring the division into levels.

** Rofi
See the =./rofi= folder and its =readme.org= file.

** Waybar
Adding the following to your waybar configuration will enable you to add a module to it that replaces the =sway/workspaces= one. The advantages of this replacement one is that the workspaces are shown in alphabetic order rather than in order of creation, and that the levels appear explicitely. The main downside is that clicking on a specific workspace doesn't do anything specific to that workspace. Instead, with the following configuration, a left click and a right click select the previous/next workspace, and a middle-click opens the rofi-based workspace switcher.

#+BEGIN_SRC 
  "custom/etabli": {
      "format": " {}",
      "exec": "python3 $HOME/etabli/waybar_daemon.py",
      "restart-interval": 1,
      "return-type": "json",
      "on-click": "python3 $HOME/etabli/etabli.py prev_workspace",
      "on-click-right": "python3 $HOME/etabli/etabli.py next_workspace",
      "on-click-middle": "zsh $HOME/etabli/rofi/rofi-workspace-switch",
  },
#+END_SRC

The appearance of the waybar module is configured by changing the prettifying functions at the top of the =waybar_daemon.py= script. The default setting is intended to be used with the following waybar CSS.

#+BEGIN_SRC css
#custom-etabli {
    background-color: rgba(170, 170, 170, 0.9);
    padding-left:2px;
    padding-right:2px;
}
#+END_SRC
* Known problems
- Multiple outputs are not handle very gracefully by the waybar module: it simply displays the workspaces of the focused output, on all outputs at the same time. Any suggestions to fix this is welcome!
