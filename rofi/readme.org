#+TITLE: ZSH Scripts Providing a dmenu-like Interface



This [[https://orgmode.org/][orgmode]] file is both the documentation and the original source code for the scripts in this folder. They use the =etabli.py= script in combination with some basic =zsh= scripting to interact with the dmenu-like launcher of your choice, e.g. [[https://github.com/davatorium/rofi][rofi]], and use it to provide a convenient interface to deal with workspaces and levels.

Similar results could be achieved using =jq= to for instance parse the output of =swaymsg -t get_workspaces= (in fact, this is how these scripts started), but I preferred to get rid of the dependence on =jq= and instead have =etabli.py= handle such interaction, the aim being to allow abritrarily complex processing down the line.

* Building the ZSH Scripts
** Common Variables and Setup
The command running the =etabli.py= script must be set here.

#+NAME: etabli
#+BEGIN_SRC sh
python3 ~/etabli/etabli.py
#+END_SRC



If you intend to use =rofi= as your prompt, the following line will start it in the proper mode. Feel free to customize this line if, for instance, your =rofi= configuration doesn't live in the specified directory.

#+NAME: dmenu-command
#+BEGIN_SRC sh
rofi -dmenu -i  -config ~/.config/rofi/rofi.rasi -p 
#+END_SRC

Alternatively, rename the following snippet to =dmenu-command= to replace =rofi= with =kickoff=. You can basically use any =dmenu=-style tool, provided that you can create a command-line whereby the list of choices is specified as a newline separated list sent through =stdin=, and where the prompt can be appended to the end of the string.

#+NAME: dmenu-command-unused
#+BEGIN_SRC sh
~/.cargo/bin/kickoff --from-stdin --stdout -p 
#+END_SRC

#+RESULTS: dmenu-command-unused

** Renaming
We need to grab the name of the current workspace (I use the method given [[https://gist.github.com/Sprit3Dan/bb730c9405d4632cc90a1d36b5400207][here]]), the name to give (using the launcher), and then the right message via =swaymsg=.


#+BEGIN_SRC sh :tangle ./rofi-workspace-rename :results output silent :noweb yes
#!/usr/bin/zsh

OLD_NAME=$(<<etabli>> current_workspace)
LEVEL=$(<<etabli>> current_level)
NEW_NAME=$(<<etabli>> prepare | <<dmenu-command>> "Enter new name (old was \`$OLD_NAME\`)" -filter $LEVEL/ -l 0 | awk -F " " '{print $NF}')


if [[ $NEW_NAME ]]; then
    swaymsg rename workspace $OLD_NAME to $NEW_NAME
else
    echo "not doing anything"
fi
#+END_SRC
** Switching
We grab the name of all the workspaces by parsing the output of =swaymsg -t get_workspaces= using =jq=, and then use =rofi= to select one.

#+BEGIN_SRC sh :tangle ./rofi-workspace-switch :results output silent :noweb yes
#!/usr/bin/zsh

WORKSPACES=$(<<etabli>> get_workspaces)
echo $WORKSPACES
SELECTED_WORKSPACE=$(echo $WORKSPACES | <<dmenu-command>> "Go to workspace" | awk -F " " '{print $NF}')
if [[ $SELECTED_WORKSPACE ]]; then
    swaymsg workspace "$SELECTED_WORKSPACE"
else
    echo "not doing anything"

fi
#+END_SRC
** Sending container
*** To a specific workspace 
Basically identical to the [[*Switching][previous script]], but this one sends the focused window there.

After sending the container, we "follow" it by also switching the workspace.

#+BEGIN_SRC sh :tangle ./rofi-workspace-send :results output silent :noweb yes
#!/usr/bin/zsh


WORKSPACES=$(<<etabli>> get_workspaces)
echo $WORKSPACES
SELECTED_WORKSPACE=$(echo $WORKSPACES | <<dmenu-command>> "Send to workspace" | awk -F " " '{print $NF}')
if [[ $SELECTED_WORKSPACE ]]; then
    swaymsg move container to workspace "$SELECTED_WORKSPACE"
    swaymsg workspace "$SELECTED_WORKSPACE"
else
    echo "not doing anything"
fi
#+END_SRC
*** To a nearby workspace in the same level
Sends the current container to a nearby workspace (previous or next one) in the next level

#+BEGIN_SRC sh :tangle ./rofi-container-level :results output silent :noweb yes
#!/usr/bin/zsh

if (($1==1)); then
   WORKSPACE=$(<<etabli>> name_next_workspace_in_level)
else
   WORKSPACE=$(<<etabli>> name_previous_workspace_in_level)
fi
echo "$WORKSPACE"
swaymsg move container to workspace "$WORKSPACE"
swaymsg workspace "$WORKSPACE"
#+END_SRC
*** To a new workspace in the same level
Sends the current container to a nearby workspace (previous or next one) in the next level

#+BEGIN_SRC sh :tangle ./rofi-container-new-level :results output silent :noweb yes
#!/usr/bin/zsh

WORKSPACE=$(<<etabli>> name_new_workspace_in_level)
echo "$WORKSPACE"
swaymsg move container to workspace "$WORKSPACE"
swaymsg workspace "$WORKSPACE"
#+END_SRC

** Listing all windows
This time, we
#+BEGIN_SRC sh :tangle ./rofi-window-find :results output silent :noweb yes
#!/usr/bin/zsh

WINDOWS=$(<<etabli>> list_windows)
echo $WINDOWS
SELECTED_DATA=$(echo $WINDOWS | <<dmenu-command>> "Select window")
if [[ $SELECTED_DATA ]]; then
    SELECTED_WORKSPACE=$(echo -n $SELECTED_DATA | cut -f 1)
    SELECTED_WINDOW=$(echo -n $SELECTED_DATA | cut -f 2)
    echo $SELECTED_WORKSPACE
    echo $SELECTED_WINDOW
    swaymsg workspace "$SELECTED_WORKSPACE"
    <<etabli>> focus_window "$SELECTED_WINDOW"
else
    echo "not doing anything"
fi
#+END_SRC

** Using level variables
Setting a level variable is simple, we simply need to run the =etabli= command with some arguments.


#+BEGIN_SRC sh :tangle ./rofi-set-level-directory :results output silent :noweb yes
#!/usr/bin/zsh

CURRENT_DIRECTORY=$(<<etabli>> get_level_variable directory)
if [[ $CURRENT_DIRECTORY == "" ]]; then
    EXPLAIN="New level directory"
else
    EXPLAIN="New level directory (old was \`$CURRENT_DIRECTORY\`)"
fi

NEW_DIRECTORY=$(find ~/ -type d -not -path "*/.*" -not -path "*miniforge*" | rofi -dmenu -i)
echo $NEW_DIRECTORY
if [[ $NEW_DIRECTORY ]]; then
    <<etabli>> set_level_variable directory "$NEW_DIRECTORY"
else
    echo "doing nothing"
fi
#+END_SRC


# SELECTED_WORKSPACE=$(<<dmenu-command>> "default directory")
* Usage
To use these scripts, simply add something like the following snippet to your =sway= configuration, where =path/to/rofi_folder/= needs to be replaced by the actual path to this folder.

#+BEGIN_SRC
bindsym $mod+n exec zsh path/to/rofi_folder/rofi-workspace-rename
bindsym $mod+b exec zsh path/to/rofi_folder/rofi-workspace-switch
bindsym $mod+o exec zsh path/to/rofi_folder/rofi-container-level 1
bindsym $mod+o exec zsh path/to/rofi_folder/rofi-container-level -1
bindsym $mod+Shift+b exec zsh path/to/rofi_folder/rofi-workspace-send
#+END_SRC

With these settings, pressing =mod+n= will create a rofi prompt to choose which workspace to switch to. 
